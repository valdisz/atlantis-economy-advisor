directive @authorize(
  """
  Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER

  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]
) on FIELD_DEFINITION | OBJECT | SCHEMA

"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """Deferred when true."""
  if: Boolean

  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """Streamed when true."""
  if: Boolean

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int! = 0

  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String
) on FIELD

type AdditionalReport {
  error: String
  json: [Byte!]
  name: String!
  source: [Byte!]!
  type: ReportType!
}

type AdditionalReportCollectionSegment {
  items: [AdditionalReport]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Alliance implements Node {
  id: ID!
  members: [AllianceMember]
  name: String!
}

type AllianceCreateResult implements MutationResult {
  alliance: Alliance
  error: String
  isSuccess: Boolean!
}

type AllianceJoinResult implements MutationResult {
  alliance: Alliance
  error: String
  isSuccess: Boolean!
  membership: AllianceMember
}

type AllianceMember {
  acceptedAt: DateTime
  canInvite: Boolean!
  createdAt: DateTime!
  name: String
  number: Int
  owner: Boolean!
  shareMap: Boolean!
  teachMages: Boolean!
  turn(number: Int!): AllianceMemberTurn
  turns: [AllianceMemberTurn]
}

type AllianceMemberTurn {
  number: Int!
  units(filter: UnitsFilterInput, skip: Int, take: Int): UnitCollectionSegment
}

interface AnItem {
  amount: Int!
  code: String
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
}

type Attitude {
  factionNumber: Int!
  stance: Stance!
}

type BackgroundJob {
  id: String
  reason: String
  state: JobState!
}

type Battle {
  attacker: Participant
  attackers: [BattleUnit]
  casualties: [Casualties]
  defender: Participant
  defenders: [BattleUnit]
  location: Location
  rose: [BattleItem]
  rounds: [BattleRound]
  spoils: [BattleItem]
  statistics: String
}

type BattleFaction {
  name: String
  number: Int!
}

type BattleItem implements AnItem {
  amount: Int!
  code: String
}

type BattleRound {
  log: String
  statistics: String
}

type BattleSkill {
  level: Int!
  name: String
}

type BattleUnit {
  description: String
  faction: BattleFaction
  flags: [String]
  items: [BattleItem]
  name: String
  number: Int!
  skills: [BattleSkill]
}

"""
The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255.
"""
scalar Byte

type Capacity {
  flying: Int!
  riding: Int!
  swimming: Int!
  walking: Int!
}

type Casualties {
  army: Participant
  damagedUnits: [Int!]
  lost: Int!
}

"""Information about the offset pagination."""
type CollectionSegmentInfo {
  """
  Indicates whether more items exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more items exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!
}

type Coords {
  label: String
  x: Int!
  y: Int!
  z: Int!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

enum Direction {
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
}

type Event {
  amount: Int
  category: EventCategory!
  factionNumber: Int!
  id: Long!
  itemCode: String
  itemName: String
  itemPrice: Int
  message: String!
  regionCode: String
  type: EventType!
  unitName: String
  unitNumber: Int
}

enum EventCategory {
  BUY
  CAST
  CLAIM
  CONSUME
  ENTERTAIN
  GIVE
  PILLAGE
  PRODUCE
  SELL
  STUDY
  TAX
  UNKNOWN
  WITHDRAW
  WORK
}

type EventCollectionSegment {
  items: [Event]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

enum EventType {
  BATTLE
  ERROR
  INFO
}

type Exit {
  direction: Direction!
  label: String!
  province: String!
  settlement: Settlement
  targetRegion: ID!
  terrain: String!
  x: Int!
  y: Int!
  z: Int!
}

type Expenses {
  consume: Int!
  study: Int!
  total: Int!
  trade: Int!
}

type Faction implements Node {
  attitudes: [Attitude]
  defaultAttitude: Stance
  events: [Event]
  id: ID!
  name: String!
  number: Int!
}

type FleetContent {
  count: Int!
  type: String
}

type Game implements Node {
  createdAt: DateTime!
  createdBy: User
  createdByUserId: Long
  id: ID!
  lastTurnNumber: Int
  me: Player
  name: String!
  nextTurnNumber: Int
  options: GameOptions!
  players(quit: Boolean! = false, skip: Int, take: Int): PlayerCollectionSegment
  ruleset: [Byte!]!
  status: GameStatus!
  turns: [Turn]
  type: GameType!
  updatedAt: DateTime!
  updatedBy: User
  updatedByUserId: Long
}

type GameCollectionSegment {
  items: [Game]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type GameCreateResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameEngine implements Node {
  createdAt: DateTime!
  createdBy: User
  createdByUserId: Long
  description: String
  id: ID!
  name: String!
  remote: Boolean!
  remoteApi: String
  remoteOptions: String
  updatedAt: DateTime!
  updatedBy: User
  updatedByUserId: Long
}

type GameEngineCollectionSegment {
  items: [GameEngine]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type GameEngineCreateRemoteResult implements MutationResult {
  engine: GameEngine
  error: String
  isSuccess: Boolean!
}

type GameEngineCreateResult implements MutationResult {
  engine: GameEngine
  error: String
  isSuccess: Boolean!
}

type GameEngineDeleteResult implements MutationResult {
  error: String
  isSuccess: Boolean!
}

type GameJoinLocalResult implements MutationResult {
  error: String
  isSuccess: Boolean!
  registration: Registration
}

type GameJoinRemoteResult implements MutationResult {
  error: String
  isSuccess: Boolean!
  player: Player
}

input GameNextTurnForceInput {
  merge: Boolean!
  parse: Boolean!
  process: Boolean!
}

type GameNextTurnResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
  jobId: String
}

type GameOptions {
  finishAt: DateTime
  map: [MapLevel]
  schedule: String
  serverAddress: String
  startAt: DateTime
  timeZone: String
}

input GameOptionsInput {
  finishAt: DateTime
  map: [MapLevelInput]
  schedule: String
  serverAddress: String
  startAt: DateTime
  timeZone: String
}

type GameOptionsSetResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GamePauseResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameScheduleSetResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

type GameStartResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

enum GameStatus {
  LOCKED
  NEW
  PAUSED
  RUNNING
  STOPED
}

type GameStopResult implements MutationResult {
  error: String
  game: Game
  isSuccess: Boolean!
}

enum GameType {
  LOCAL
  REMOTE
}

type Income {
  claim: Int!
  entertain: Int!
  pillage: Int!
  tax: Int!
  total: Int!
  trade: Int!
  work: Int!
}

type Item implements AnItem {
  amount: Int!
  code: String!
}

enum JobState {
  DELETED
  FAILED
  PENDING
  RUNNING
  SUCCEEDED
  UNKNOWN
}

type Location {
  coords: Coords
  province: String
  terrain: String
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MapLevel {
  height: Int!
  label: String
  level: Int!
  width: Int!
}

input MapLevelInput {
  height: Int!
  label: String
  level: Int!
  width: Int!
}

enum Market {
  FOR_SALE
  WANTED
}

type Mutation {
  allianceCreate(name: String, playerId: ID!): AllianceCreateResult
  allianceJoin(allianceId: ID!, playerId: ID!): AllianceJoinResult
  deleteTurn(turnId: ID): Int!
  gameComplete(gameId: ID!): GameStopResult
  gameCreate(finishAt: DateTime, gameEngineId: ID!, map: [MapLevelInput], name: String, schedule: String, startAt: DateTime, timeZone: String): GameCreateResult
  gameEngineCreate(content: Upload, description: String, name: String, ruleset: Upload): GameEngineCreateResult
  gameEngineCreateRemote(api: String, description: String, name: String, options: String): GameEngineCreateRemoteResult
  gameEngineDelete(gameEngineId: ID!): GameEngineDeleteResult
  gameJoinLocal(gameId: ID!, name: String): GameJoinLocalResult
  gameJoinRemote(gameId: ID!, password: String, playerId: ID!): GameJoinRemoteResult
  gameNextTurn(force: GameNextTurnForceInput, gameId: ID!, turnNumber: Int): GameNextTurnResult
  gameOptionsSet(gameId: ID!, options: GameOptionsInput): GameOptionsSetResult
  gamePause(gameId: ID!): GamePauseResult
  gameScheduleSet(gameId: ID!, schedule: String): GameScheduleSetResult
  gameStart(gameId: ID!): GameStartResult
  playerQuit(playerId: ID!): PlayerQuitResult
  setOrders(orders: String, unitId: ID): UnitOrdersSetResult
  setRuleset(gameId: ID!, ruleset: String): Game
  studyPlanStudy(skill: String, unitId: ID): StudyPlanResult
  studyPlanTarget(level: Int!, skill: String, unitId: ID): StudyPlanResult
  studyPlanTeach(unitId: ID, units: [Int!]): StudyPlanResult
  userCreate(email: String, name: String, password: String): User
  userRolesUpdate(add: [String], remove: [String], userId: ID!): User
}

interface MutationResult {
  error: String
  isSuccess: Boolean!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Orders {
  orders: String
  turnNumber: Int!
  unitNumber: Int!
}

type OrdersCollectionSegment {
  items: [Orders]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Participant {
  name: String
  number: Int!
}

type Player implements Node {
  alliance: Alliance
  createdAt: DateTime!
  game: Game
  id: ID!
  isClaimed: Boolean!
  isQuit: Boolean!
  lastTurn: PlayerTurn
  lastTurnNumber: Int
  name: String
  nextTurn: PlayerTurn
  nextTurnNumber: Int
  number: Int!
  password: String
  reports: [Report]
  turn(number: Int!): PlayerTurn
  turns(skip: Int, take: Int): PlayerTurnCollectionSegment
  updatedAt: DateTime!
}

type PlayerCollectionSegment {
  items: [Player]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type PlayerQuitResult implements MutationResult {
  error: String
  isSuccess: Boolean!
  player: Player
}

type PlayerTurn implements Node {
  additionalReports(skip: Int, take: Int): AdditionalReportCollectionSegment
  battles: [Battle]
  events(skip: Int, take: Int): EventCollectionSegment
  expenses: Expenses
  factionName: String!
  factionNumber: Int!
  factions: [Faction]
  id: ID!
  income: Income
  isOrdersSubmitted: Boolean!
  isProcessed: Boolean!
  isReady: Boolean!
  isTimesSubmitted: Boolean!
  orders(skip: Int, take: Int, unitNumber: Int): OrdersCollectionSegment
  ordersSubmittedAt: DateTime
  readyAt: DateTime
  regions(skip: Int, take: Int, withStructures: Boolean! = false): RegionCollectionSegment
  statistics: [TurnStatisticsItem]
  structures(skip: Int, take: Int): StructureCollectionSegment
  studyPlans: [StudyPlan]
  timesSubmittedAt: DateTime
  treasury: [TreasuryItem]
  turnNumber: Int!
  unclaimed: Int!
  units(filter: UnitsFilterInput, skip: Int, take: Int): UnitCollectionSegment
}

type PlayerTurnCollectionSegment {
  items: [PlayerTurn]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type Query {
  gameEngines(skip: Int, take: Int): GameEngineCollectionSegment
  games(skip: Int, take: Int): GameCollectionSegment
  job(jobId: String): BackgroundJob
  me: User

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  users(skip: Int, take: Int): UserCollectionSegment
}

type Region implements Node {
  entertainment: Int!
  exits: [Exit]
  expenses: Expenses
  explored: Boolean!
  forSale: [TradableItem]
  gate: Int
  id: ID!
  income: Income
  label: String!
  lastVisitedAt: Int
  population: Int!
  produces: [Item]
  province: String!
  race: String
  settlement: Settlement
  statistics: [RegionStatisticsItem]
  structures: [Structure]
  tax: Int!
  terrain: String!
  totalWages: Int!
  wages: Float!
  wanted: [TradableItem]
  x: Int!
  y: Int!
  z: Int!
}

type RegionCollectionSegment {
  items: [Region]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type RegionStatisticsItem implements AnItem {
  amount: Int!
  category: StatisticsCategory!
  code: String!
}

type Registration {
  createdAt: DateTime!
  id: Long!
  name: String
  password: String
}

type Report {
  error: String
  factionNumber: Int!
  isMerged: Boolean!
  isParsed: Boolean!
}

enum ReportType {
  MAP
  REPORT
}

type Sailors {
  current: Int!
  required: Int!
}

type Settlement {
  name: String
  size: SettlementSize!
}

enum SettlementSize {
  CITY
  TOWN
  VILLAGE
}

type Skill {
  code: String
  days: Int
  level: Int
}

enum Stance {
  ALLY
  FRIENDLY
  HOSTILE
  NEUTRAL
  UNFRIENDLY
}

enum StatisticsCategory {
  BOUGHT
  CONSUMED
  PRODUCED
  SOLD
}

type Structure implements Node {
  contents: [FleetContent]
  description: String
  flags: [String]
  id: ID!
  load: TransportationLoad
  name: String!
  needs: Int
  number: Int!
  sailDirections: [Direction!]
  sailors: Sailors
  sequence: Int!
  speed: Int
  type: String!
  x: Int!
  y: Int!
  z: Int!
}

type StructureCollectionSegment {
  items: [Structure]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type StudyPlan {
  study: String
  target: Skill
  teach: [Int!]
  unitNumber: Int!
}

type StudyPlanResult implements MutationResult {
  error: String
  isSuccess: Boolean!
  studyPlan: StudyPlan
}

type TradableItem implements AnItem {
  amount: Int!
  code: String!
  market: Market!
  price: Int!
}

type TransportationLoad {
  max: Int!
  used: Int!
}

type TreasuryItem implements AnItem {
  amount: Int!
  code: String!
  max: Int!
  rank: Int!
  total: Int!
}

type Turn implements Node {
  id: ID!
  number: Int!
  reports: [Report]
  state: TurnState!
}

enum TurnState {
  EXECUTED
  MERGED
  PARSED
  PENDING
  PROCESSED
  READY
}

type TurnStatisticsItem implements AnItem {
  amount: Int!
  category: StatisticsCategory!
  code: String!
}

type Unit implements Node {
  canStudy: [String]
  capacity: Capacity
  combatSpell: String
  description: String
  factionNumber: Int
  flags: [String]
  id: ID!
  isMage: Boolean!
  items: [UnitItem]!
  name: String!
  number: Int!
  onGuard: Boolean!
  orders: String
  readyItem: String
  sequence: Int!
  skills: [Skill]
  structureNumber: Int
  studyPlan: StudyPlan
  weight: Int
  x: Int!
  y: Int!
  z: Int!
}

type UnitCollectionSegment {
  items: [Unit]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type UnitItem implements AnItem {
  amount: Int!
  code: String!
  illusion: Boolean!
  props: String
  unfinished: Boolean!
}

type UnitOrdersSetResult implements MutationResult {
  error: String
  isSuccess: Boolean!
}

input UnitsFilterInput {
  mages: Boolean
  own: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  createdAt: DateTime!
  emails: [UserEmail]
  id: ID!
  lastVisitAt: DateTime!
  name: String!
  players: [Player]
  roles: [String]
  updatedAt: DateTime!
}

type UserCollectionSegment {
  items: [User]

  """Information to aid in pagination."""
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

type UserEmail {
  createdAt: DateTime!
  deletedAt: DateTime
  disabled: Boolean!
  email: String!
  emailVerifiedAt: DateTime
  id: Long!
  primary: Boolean!
  updatedAt: DateTime!
  user: User
  userId: Long!
  verificationCode: String
  verificationCodeExpiresAt: DateTime
}