// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using advisor.Persistence;

#nullable disable

namespace server.Migrations.mssql
{
    [DbContext(typeof(MsSqlDatabase))]
    [Migration("20231103070134_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("advisor.Persistence.DbAdditionalReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Json")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber");

                    b.ToTable("AditionalReports");
                });

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Alliances");
                });

            modelBuilder.Entity("advisor.Persistence.DbAllianceMember", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("AllianceId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("CanInvite")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Owner")
                        .HasColumnType("bit");

                    b.Property<bool>("ShareMap")
                        .HasColumnType("bit");

                    b.Property<bool>("TeachMages")
                        .HasColumnType("bit");

                    b.HasKey("PlayerId", "AllianceId");

                    b.HasIndex("AllianceId");

                    b.ToTable("AllianceMembers");
                });

            modelBuilder.Entity("advisor.Persistence.DbArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("GameId", "TurnNumber");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("advisor.Persistence.DbAttitude", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("int");

                    b.Property<int>("TargetFactionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Stance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId", "TurnNumber", "FactionNumber", "TargetFactionNumber");

                    b.ToTable("Attitudes");
                });

            modelBuilder.Entity("advisor.Persistence.DbBattle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Battle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("advisor.Persistence.DbEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ItemName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ItemPrice")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MissingUnitNumber")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "UnitNumber");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("advisor.Persistence.DbExit", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("OriginRegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("TargetRegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "OriginRegionId", "TargetRegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "TargetRegionId");

                    b.ToTable("Exits");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("DefaultAttitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PlayerId", "TurnNumber", "Number");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("advisor.Persistence.DbGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EngineId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LastTurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("NextTurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EngineId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameEngine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<byte[]>("Engine")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Remote")
                        .HasColumnType("bit");

                    b.Property<string>("RemoteApi")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("RemoteOptions")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<byte[]>("Ruleset")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("GameEngines");
                });

            modelBuilder.Entity("advisor.Persistence.DbLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("HttpVersion")
                        .HasMaxLength(16384)
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IdentityId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(39)
                        .HasColumnType("nvarchar(39)");

                    b.Property<string>("IpAddressFamily")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Outcome")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Referer")
                        .HasMaxLength(16384)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(16384)
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdentityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.HasIndex("UserId");

                    b.ToTable("DbLoginAttempt");
                });

            modelBuilder.Entity("advisor.Persistence.DbOrders", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.Property<string>("Orders")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId", "TurnNumber", "UnitNumber");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsQuit")
                        .HasColumnType("bit");

                    b.Property<int?>("LastTurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("NextTurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayerTurn", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("FactionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("int");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("OrdersSubmittedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ReadyAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("TimesSubmittedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Unclaimed")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber");

                    b.HasIndex("GameId");

                    b.ToTable("PlayerTurns");
                });

            modelBuilder.Entity("advisor.Persistence.DbProductionItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId", "Code");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("Entertainment")
                        .HasColumnType("int");

                    b.Property<bool>("Explored")
                        .HasColumnType("bit");

                    b.Property<int?>("Gate")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("LastVisitedAt")
                        .HasColumnType("int");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Race")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TotalWages")
                        .HasColumnType("int");

                    b.Property<double>("Wages")
                        .HasColumnType("float");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegionStatisticsItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.ToTable("RegionStatistics");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("advisor.Persistence.DbReport", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactionNumber")
                        .HasColumnType("int");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMerged")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Json")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PlayerId", "TurnNumber");

                    b.HasIndex("GameId", "TurnNumber");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Flags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Needs")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("SailDirections")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int?>("Speed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "Id");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("advisor.Persistence.DbStudyPlan", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.Property<string>("Study")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Teach")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId", "TurnNumber", "UnitNumber");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("advisor.Persistence.DbTradableItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Market")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "RegionId", "Market", "Code");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("advisor.Persistence.DbTreasuryItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "Code");

                    b.ToTable("Treasury");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("GameData")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PlayerData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId", "Number");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurnStatisticsItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "TurnNumber");

                    b.ToTable("TurnStatistics");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("CanStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombatSpell")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("FactionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Flags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMage")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("OnGuard")
                        .HasColumnType("bit");

                    b.Property<string>("Orders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReadyItem")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("RegionId")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrcutureId")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int?>("StructureNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<int>("Z")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "TurnNumber", "Number");

                    b.HasIndex("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasIndex("PlayerId", "TurnNumber", "RegionId");

                    b.HasIndex("PlayerId", "TurnNumber", "StrcutureId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnitItem", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Illusion")
                        .HasColumnType("bit");

                    b.Property<string>("Props")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unfinished")
                        .HasColumnType("bit");

                    b.HasKey("PlayerId", "TurnNumber", "UnitNumber", "Code");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("advisor.Persistence.DbUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Digest")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("LastVisitAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("advisor.Persistence.DbUserEmail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset?>("EmailVerifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTimeOffset?>("VerificationCodeExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("advisor.Persistence.DbUserIdentity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Details")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Provider")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identities");
                });

            modelBuilder.Entity("advisor.Persistence.DbAdditionalReport", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("AdditionalReports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Reports")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Alliances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("advisor.Persistence.DbAllianceMember", b =>
                {
                    b.HasOne("advisor.Persistence.DbAlliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("AllianceMembererships")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alliance");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("advisor.Persistence.DbArticle", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Articles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Articles")
                        .HasForeignKey("GameId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbAttitude", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Attitudes")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Attitudes")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbBattle", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Battles")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbArmy", "Attacker", b1 =>
                        {
                            b1.Property<long>("DbBattleId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("DbBattleId");

                            b1.ToTable("Battles");

                            b1.WithOwner()
                                .HasForeignKey("DbBattleId");
                        });

                    b.OwnsOne("advisor.Persistence.DbArmy", "Defender", b1 =>
                        {
                            b1.Property<long>("DbBattleId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("DbBattleId");

                            b1.ToTable("Battles");

                            b1.WithOwner()
                                .HasForeignKey("DbBattleId");
                        });

                    b.Navigation("Attacker")
                        .IsRequired();

                    b.Navigation("Defender")
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbEvent", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.HasOne("advisor.Persistence.DbUnit", "Unit")
                        .WithMany("Events")
                        .HasForeignKey("PlayerId", "TurnNumber", "UnitNumber");

                    b.Navigation("Faction");

                    b.Navigation("Region");

                    b.Navigation("Turn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("advisor.Persistence.DbExit", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Exits")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Origin")
                        .WithMany("Exits")
                        .HasForeignKey("PlayerId", "TurnNumber", "OriginRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Target")
                        .WithMany()
                        .HasForeignKey("PlayerId", "TurnNumber", "TargetRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbSettlement", "Settlement", b1 =>
                        {
                            b1.Property<long>("DbExitPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbExitTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbExitOriginRegionId")
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("DbExitTargetRegionId")
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbExitPlayerId", "DbExitTurnNumber", "DbExitOriginRegionId", "DbExitTargetRegionId");

                            b1.ToTable("Exits");

                            b1.WithOwner()
                                .HasForeignKey("DbExitPlayerId", "DbExitTurnNumber", "DbExitOriginRegionId", "DbExitTargetRegionId");
                        });

                    b.Navigation("Origin");

                    b.Navigation("Settlement");

                    b.Navigation("Target");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Factions")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbGame", b =>
                {
                    b.HasOne("advisor.Persistence.DbUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("advisor.Persistence.DbGameEngine", "Engine")
                        .WithMany("Games")
                        .HasForeignKey("EngineId");

                    b.HasOne("advisor.Persistence.DbUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Engine");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameEngine", b =>
                {
                    b.HasOne("advisor.Persistence.DbUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("advisor.Persistence.DbUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("advisor.Persistence.DbLoginAttempt", b =>
                {
                    b.HasOne("advisor.Persistence.DbUserIdentity", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Identity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbOrders", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Orders")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayerTurn", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("Turns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbExpenses", "Expenses", b1 =>
                        {
                            b1.Property<long>("DbPlayerTurnPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbPlayerTurnTurnNumber")
                                .HasColumnType("int");

                            b1.Property<int>("Consume")
                                .HasColumnType("int");

                            b1.Property<int>("Study")
                                .HasColumnType("int");

                            b1.Property<int>("Trade")
                                .HasColumnType("int");

                            b1.HasKey("DbPlayerTurnPlayerId", "DbPlayerTurnTurnNumber");

                            b1.ToTable("PlayerTurns");

                            b1.WithOwner()
                                .HasForeignKey("DbPlayerTurnPlayerId", "DbPlayerTurnTurnNumber");
                        });

                    b.OwnsOne("advisor.Persistence.DbIncome", "Income", b1 =>
                        {
                            b1.Property<long>("DbPlayerTurnPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbPlayerTurnTurnNumber")
                                .HasColumnType("int");

                            b1.Property<int>("Claim")
                                .HasColumnType("int");

                            b1.Property<int>("Entertain")
                                .HasColumnType("int");

                            b1.Property<int>("Pillage")
                                .HasColumnType("int");

                            b1.Property<int>("Tax")
                                .HasColumnType("int");

                            b1.Property<int>("Trade")
                                .HasColumnType("int");

                            b1.Property<int>("Work")
                                .HasColumnType("int");

                            b1.HasKey("DbPlayerTurnPlayerId", "DbPlayerTurnTurnNumber");

                            b1.ToTable("PlayerTurns");

                            b1.WithOwner()
                                .HasForeignKey("DbPlayerTurnPlayerId", "DbPlayerTurnTurnNumber");
                        });

                    b.Navigation("Expenses");

                    b.Navigation("Income");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("advisor.Persistence.DbProductionItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", null)
                        .WithMany("Production")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", null)
                        .WithMany("Produces")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Regions")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbExpenses", "Expenses", b1 =>
                        {
                            b1.Property<long>("DbRegionPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbRegionTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbRegionId")
                                .HasColumnType("nvarchar(14)");

                            b1.Property<int>("Consume")
                                .HasColumnType("int");

                            b1.Property<int>("Study")
                                .HasColumnType("int");

                            b1.Property<int>("Trade")
                                .HasColumnType("int");

                            b1.HasKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");
                        });

                    b.OwnsOne("advisor.Persistence.DbIncome", "Income", b1 =>
                        {
                            b1.Property<long>("DbRegionPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbRegionTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbRegionId")
                                .HasColumnType("nvarchar(14)");

                            b1.Property<int>("Claim")
                                .HasColumnType("int");

                            b1.Property<int>("Entertain")
                                .HasColumnType("int");

                            b1.Property<int>("Pillage")
                                .HasColumnType("int");

                            b1.Property<int>("Tax")
                                .HasColumnType("int");

                            b1.Property<int>("Trade")
                                .HasColumnType("int");

                            b1.Property<int>("Work")
                                .HasColumnType("int");

                            b1.HasKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");
                        });

                    b.OwnsOne("advisor.Persistence.DbSettlement", "Settlement", b1 =>
                        {
                            b1.Property<long>("DbRegionPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbRegionTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbRegionId")
                                .HasColumnType("nvarchar(14)");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");

                            b1.ToTable("Regions");

                            b1.WithOwner()
                                .HasForeignKey("DbRegionPlayerId", "DbRegionTurnNumber", "DbRegionId");
                        });

                    b.Navigation("Expenses");

                    b.Navigation("Income");

                    b.Navigation("Settlement");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegionStatisticsItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", null)
                        .WithMany("Statistics")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegistration", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Registrations")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbReport", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayer", "Player")
                        .WithMany("Reports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbTurn", "Turn")
                        .WithMany("Reports")
                        .HasForeignKey("GameId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Structures")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Structures")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.OwnsOne("advisor.Persistence.DbSailors", "Sailors", b1 =>
                        {
                            b1.Property<long>("DbStructurePlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbStructureTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbStructureId")
                                .HasColumnType("nvarchar(24)");

                            b1.Property<int>("Current")
                                .HasColumnType("int");

                            b1.Property<int>("Required")
                                .HasColumnType("int");

                            b1.HasKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");
                        });

                    b.OwnsOne("advisor.Persistence.DbTransportationLoad", "Load", b1 =>
                        {
                            b1.Property<long>("DbStructurePlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbStructureTurnNumber")
                                .HasColumnType("int");

                            b1.Property<string>("DbStructureId")
                                .HasColumnType("nvarchar(24)");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Used")
                                .HasColumnType("int");

                            b1.HasKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");

                            b1.ToTable("Structures");

                            b1.WithOwner()
                                .HasForeignKey("DbStructurePlayerId", "DbStructureTurnNumber", "DbStructureId");
                        });

                    b.Navigation("Load");

                    b.Navigation("Region");

                    b.Navigation("Sailors");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbStudyPlan", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Plans")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUnit", "Unit")
                        .WithOne("StudyPlan")
                        .HasForeignKey("advisor.Persistence.DbStudyPlan", "PlayerId", "TurnNumber", "UnitNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("advisor.Persistence.DbSkill", "Target", b1 =>
                        {
                            b1.Property<long>("DbStudyPlanPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbStudyPlanTurnNumber")
                                .HasColumnType("int");

                            b1.Property<int>("DbStudyPlanUnitNumber")
                                .HasColumnType("int");

                            b1.Property<string>("Code")
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)");

                            b1.Property<int?>("Level")
                                .HasColumnType("int");

                            b1.HasKey("DbStudyPlanPlayerId", "DbStudyPlanTurnNumber", "DbStudyPlanUnitNumber");

                            b1.ToTable("StudyPlans");

                            b1.WithOwner()
                                .HasForeignKey("DbStudyPlanPlayerId", "DbStudyPlanTurnNumber", "DbStudyPlanUnitNumber");
                        });

                    b.Navigation("Target");

                    b.Navigation("Turn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("advisor.Persistence.DbTradableItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", null)
                        .WithMany("Markets")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbRegion", null)
                        .WithMany("Markets")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("advisor.Persistence.DbTreasuryItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Treasury")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.HasOne("advisor.Persistence.DbGame", "Game")
                        .WithMany("Turns")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurnStatisticsItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Statistics")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", "Turn")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbFaction", "Faction")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "FactionNumber");

                    b.HasOne("advisor.Persistence.DbRegion", "Region")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "RegionId");

                    b.HasOne("advisor.Persistence.DbStructure", "Structure")
                        .WithMany("Units")
                        .HasForeignKey("PlayerId", "TurnNumber", "StrcutureId");

                    b.OwnsOne("advisor.Persistence.DbCapacity", "Capacity", b1 =>
                        {
                            b1.Property<long>("DbUnitPlayerId")
                                .HasColumnType("bigint");

                            b1.Property<int>("DbUnitTurnNumber")
                                .HasColumnType("int");

                            b1.Property<int>("DbUnitNumber")
                                .HasColumnType("int");

                            b1.Property<int>("Flying")
                                .HasColumnType("int");

                            b1.Property<int>("Riding")
                                .HasColumnType("int");

                            b1.Property<int>("Swimming")
                                .HasColumnType("int");

                            b1.Property<int>("Walking")
                                .HasColumnType("int");

                            b1.HasKey("DbUnitPlayerId", "DbUnitTurnNumber", "DbUnitNumber");

                            b1.ToTable("Units");

                            b1.WithOwner()
                                .HasForeignKey("DbUnitPlayerId", "DbUnitTurnNumber", "DbUnitNumber");
                        });

                    b.Navigation("Capacity");

                    b.Navigation("Faction");

                    b.Navigation("Region");

                    b.Navigation("Structure");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnitItem", b =>
                {
                    b.HasOne("advisor.Persistence.DbPlayerTurn", null)
                        .WithMany("Items")
                        .HasForeignKey("PlayerId", "TurnNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("advisor.Persistence.DbUnit", null)
                        .WithMany("Items")
                        .HasForeignKey("PlayerId", "TurnNumber", "UnitNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("advisor.Persistence.DbUserEmail", b =>
                {
                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbUserIdentity", b =>
                {
                    b.HasOne("advisor.Persistence.DbUser", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("advisor.Persistence.DbAlliance", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("advisor.Persistence.DbFaction", b =>
                {
                    b.Navigation("Attitudes");

                    b.Navigation("Events");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbGame", b =>
                {
                    b.Navigation("Alliances");

                    b.Navigation("Articles");

                    b.Navigation("Players");

                    b.Navigation("Registrations");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbGameEngine", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayer", b =>
                {
                    b.Navigation("AdditionalReports");

                    b.Navigation("AllianceMembererships");

                    b.Navigation("Reports");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("advisor.Persistence.DbPlayerTurn", b =>
                {
                    b.Navigation("Attitudes");

                    b.Navigation("Battles");

                    b.Navigation("Events");

                    b.Navigation("Exits");

                    b.Navigation("Factions");

                    b.Navigation("Items");

                    b.Navigation("Markets");

                    b.Navigation("Orders");

                    b.Navigation("Plans");

                    b.Navigation("Production");

                    b.Navigation("Regions");

                    b.Navigation("Reports");

                    b.Navigation("Statistics");

                    b.Navigation("Structures");

                    b.Navigation("Treasury");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbRegion", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Exits");

                    b.Navigation("Markets");

                    b.Navigation("Produces");

                    b.Navigation("Statistics");

                    b.Navigation("Structures");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbStructure", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("advisor.Persistence.DbTurn", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("advisor.Persistence.DbUnit", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Items");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("advisor.Persistence.DbUser", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Identities");

                    b.Navigation("LoginAttempts");

                    b.Navigation("Players");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
